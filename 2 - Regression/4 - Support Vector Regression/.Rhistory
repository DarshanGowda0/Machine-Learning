print("Hello World!")
print("Hello World!")
setwd("~/programs/Machine Learning/Regression/Polynomial Linear Regression")
#dataset preprocessing
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
#splitting of dataset into training and test data is not required
#feature scaling is also not required
#fitting linear regression model
lin_reg = lm(formula = Salary ~ .,
data = dataset)
#fitting polynomial regression model
dataset$Level2 = dataset$Level^2
dataset$Level3 = dataset$Level^3
dataset$Level4 = dataset$Level^4
poly_reg = lm(formula = Salary ~ .,
data = dataset)
#adding visualisations for linear regression model
library(ggplot2)
ggplot()+
geom_point(aes(x = dataset$Level, y = dataset$Salary),
color = 'red')+
geom_line(aes(x = dataset$Level, y = predict(lin_reg, newdata = dataset)),
color = 'blue')+
ggtitle('Linear Regression')+
xlab('Level')+
ylab('Salary')
ggplot()+
geom_point(aes(x = dataset$Level, y = dataset$Salary),
color = 'red')+
geom_line(aes(x = dataset$Level, y = predict(poly_reg, newdata = dataset)),
color = 'blue')+
ggtitle('Polynomial Regression')+
xlab('Level')+
ylab('Salary')
y_pred = predict(lin_reg, data.frame(Level = 6.5,
Level2 = 6.5^2,
Level3 = 6.5^3,
Level4 = 6.4^4))
y_pred = predict(lin_reg, data.frame(Level = 6.5)
y_pred = predict(poly_reg, data.frame(Level = 6.5,
Level2 = 6.5^2,
Level3 = 6.5^3,
Level4 = 6.4^4))
#predicting the new result using the polynomial regression model
y_pred = predict(poly_reg, data.frame(Level = 6.5,
Level2 = 6.5^2,
Level3 = 6.5^3,
Level4 = 6.4^4))
y_pred = predict(lin_reg, data.frame(Level = 6.5))
y_pred = predict(poly_reg, data.frame(Level = 6.5,
Level2 = 6.5^2,
Level3 = 6.5^3,
Level4 = 6.4^4))
y_pred = predict(poly_reg, data.frame(Level = 6.5,
Level2 = 6.5^2,
Level3 = 6.5^3,
Level4 = 6.4^4))
y_pred
#predicting the new result using the polynomial regression model
y_pred = predict(poly_reg, data.frame(Level = 6.5,
Level2 = 6.5^2,
Level3 = 6.5^3,
Level4 = 6.5^4))
y_pred
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot()+
geom_point(aes(x = dataset$Level, y = dataset$Salary),
color = 'red')+
geom_line(aes(x = x_grid, y = predict(poly_reg, newdata = x_grid)),
color = 'blue')+
ggtitle('Polynomial Regression')+
xlab('Level')+
ylab('Salary')
#dataset preprocessing
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
#splitting of dataset into training and test data is not required
#feature scaling is also not required
#fitting linear regression model
lin_reg = lm(formula = Salary ~ .,
data = dataset)
#fitting polynomial regression model
dataset$Level2 = dataset$Level^2
dataset$Level3 = dataset$Level^3
dataset$Level4 = dataset$Level^4
poly_reg = lm(formula = Salary ~ .,
data = dataset)
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot()+
geom_point(aes(x = dataset$Level, y = dataset$Salary),
color = 'red')+
geom_line(aes(x = x_grid, y = predict(poly_reg, newdata = x_grid)),
color = 'blue')+
ggtitle('Polynomial Regression')+
xlab('Level')+
ylab('Salary')
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot()+
geom_point(aes(x = dataset$Level, y = dataset$Salary),
color = 'red')+
geom_line(aes(x = x_grid, y = predict(poly_reg, newdata = x_grid)),
color = 'blue')+
ggtitle('Polynomial Regression')+
xlab('Level')+
ylab('Salary')
#dataset preprocessing
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
#splitting of dataset into training and test data is not required
#feature scaling is also not required
#fitting linear regression model
lin_reg = lm(formula = Salary ~ .,
data = dataset)
#fitting polynomial regression model
dataset$Level2 = dataset$Level^2
dataset$Level3 = dataset$Level^3
dataset$Level4 = dataset$Level^4
poly_reg = lm(formula = Salary ~ .,
data = dataset)
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot()+
geom_point(aes(x = dataset$Level, y = dataset$Salary),
color = 'red')+
geom_line(aes(x = x_grid, y = predict(poly_reg,
newdata = data.frame(Level = x_grid,
Level2 = x_grid^2,
Level3 = x_grid^3,
Level4 = x_grid^4))),
color = 'blue')+
ggtitle('Polynomial Regression')+
xlab('Level')+
ylab('Salary')
View(dataset)
setwd("~/programs/Machine Learning/Regression/Support Vector Regression")
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
install.packages('e1071')
library(e1071)
regressor = svm(formula = Salary ~ .,
data = dataset,
type = 'eps-regression')
y_pred = predict(regressor, data.frame(Level = 6.5))
# Visualising the Regression Model results (for higher resolution and smoother curve)
# install.packages('ggplot2')
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff (Regression Model)') +
xlab('Level') +
ylab('Salary')
# Visualising the SVR Model results (for higher resolution and smoother curve)
# install.packages('ggplot2')
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff (SVR Model)') +
xlab('Level') +
ylab('Salary')
